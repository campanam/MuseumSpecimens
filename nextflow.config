manifest {

	name = 'MuseumSpecimens'
	author = 'Michael G. Campana'
	homePage = 'https://github.com/campanam/MuseumSpecimens'
	description = 'Pipeline for museum specimen processing'
	mainScript = 'museumspecimens.nf'
	version = '0.1.0'
	nextflowVersion = '>=23.10.0'

}

params {

	refseq = "/scratch/nzp_ccg/lion_hap2X_out_JBAT_nov18.debris.reorder2_hap1Yadd.FINAL.fa" // Reference sequence
	gm_tmpdir = '/pool/genomics/campanam/tmp' // Scratch directory for GenMap indexing
	gm_opts = '-K 30 -E 2' // Options for GenMap mapping (except threading)
	pelibraries = "$launchDir/kenyalionsPE.csv" // File detailing paired-end sample reads
	selibraries = "$launchDir/kenyalionsSE.csv" // File detailing single-end sample reads
	readDir = "$launchDir/RawData/" // Path to reads
	
	
	markDuplicates = "picard" // Choice of "picard", "samtools" or "sambamba" for markDuplicates
	picard_conda = false // Install Picard via Nextflow Conda handling
	picard = "$launchDir/picard.jar" // Path for Picard jar file. Ignore if using Conda-installed Picard.
	picard_java = "" // Java options for Picard
	gatk_conda = false // Install GATK via Nextflow Conda handling
	gatk_build = 3 // Major version number of GATK. Currently supported values are 3 and 4.
	gatk = "$launchDir/GenomeAnalysisTK.jar" // Path for GATK jar file. Ignore if using Conda-installed GATK.
	gatk_java = "" // Java options for GATK
	filter_bams = false // Filter BAM alignments before genotyping
	phase = true // Phase haplotypes using WhatsHap trio-phasing
	whatshap_opts = "" // Additional options for whatshap phase command
	region_filter = true // Remove low-mappability/low-quality regions

	rm_species = "Felidae" // Species name for RepeatMasker
	rm_mask_opts = '-gccalc -nolow -xsmall' // Options for RepeatMasker (except threading)
	rm_model_opts = '' // Options for RepeatModeler (except threading and -lib)
	indelpad = 5 // Number of bases to remove on each side of an indel
	prefix = "test" // Prefix for final datasets
	outdir = "test_results" // Directory for final results
	dam = "SRR" // Sample name for dam
	sire = "SRR2" // Sample name for sire
	vcftools_site_filters = "--minDP 30 --minGQ 65 --maxDP 250 --max-missing 1 --min-alleles 1 --max-alleles 2" // Site filters to pass to VCFtools. Set to "NULL" to ignore this filter.
	gatk_site_filters = '--filterName "filter" --filterExpression "QUAL < 30.0 || QD < 2.0 || FS > 60.0 || MQ < 40.0 || SOR > 3.0 || ReadPosRankSum < 15 || MQRankSum < -12.5"' // Site filters to pass to GATK. Set to 'NULL' to ignore this filter.
	chr_file = "$launchDir/chr.txt" // File listing chromosomes to keep in analysis. Set to "NULL" to ignore this filter. 
	min_contig_length = 1 // Minimum length of contig (before filtering) to retain in analysis
	min_filt_contig_length = 1 // Minimum length of contig (after filtering) to retain in analysis
	dnm_opts = "-b 100 -M 10 -w 100000 -l 100000 -S 50000 --parhom" // options for calc_denovo_mutation_rate
	email = "NULL" // Email to send completion status to. Set to "NULL" for no email.
	
}

conda.enabled = true
conda.useMamba = true // Install Conda environments using Mamba manager

profiles {
	hydra {
		executor = 'sge'
		errorStrategy = { task.attempt < 4 ? 'retry' : 'finish' }
		maxRetries = 3
		storeDir = 'chkpnt' // Directory name for storeDir directive

		// Default clusterOptions for picard, vcftools and java commands
		params.java_options = '-D64 -Dserver -XX:MaxHeapSize=14G' // Options for Java 1.8
		params.java11_options = '-Dserver -XX:MaxHeapSize=7G' // Options for Java 11
		
		// Default clusterOptions for picard, vcftools and java commands
		default_medium_options = '-l mres=6G,h_data=6G,h_vmem=6G -S /bin/bash'
		default_high_options = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
	 	default_low_options = '-l mres=2G,h_data=2G,h_vmem=2G -S /bin/bash' // Options for low computation steps
		
		
		default_options = '-l mres=8G,h_data=8G,h_vmem=8G -S /bin/bash' // Default options for computation steps
			
		process {
			withName: 'prepareRef' {
				clusterOptions = default_options
				queue = 'sThC.q'
				storeDir = '/scratch/nzp_ccg/refidx'
			}
			withName: 'buildRef|prepareMitoRef|alignMitoSeqs|alignSeqs' {
				conda = 'bioconda::bwa=0.7.17 bioconda::samtools=1.16.1 conda-forge::libzlib=1.2.13'
			}
			withName: genMapIndex {
				queue = 'mThM.q'
				clusterOptions = default_high_options
			}
			withName: genMapMap {
				queue = 'mThM.q'
				cpus = 8
				penv = 'mthread'
				clusterOptions = "-l mres=10G,h_data=10G,h_vmem=10G,himem -S /bin/bash"
				storeDir = '/scratch/nzp_ccg/refidx'
			}
			withName: 'genMapIndex|genMapMap' {
				conda = 'bioconda::genmap=1.2.0 conda-forge::ruby=3.2.2'
				storeDir = '/scratch/nzp_ccg/refidx'
			}
			withName: 'trimPEAdapters|trimSEAdapters' { 
				queue = 'mThC.q'
				clusterOptions = default_options
				conda = 'bioconda::adapterremoval=2.3.3 conda-forge::libzlib=1.2.13'
			}
			withName: 'alignMitoSeqs|alignSeqs' {
				cpus = 8
				penv = 'mthread'
				queue = 'mThC.q'
				clusterOptions = default_options
			}
			withName: 'leftAlignIndels|markDup|mergedLeftAlignIndels|mergedMarkDup' {
				cpus = 2
				penv = 'mthread'
				clusterOptions = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
				queue = 'mThM.q'
				conda = 'bioconda::picard=2.27.4 bioconda::gatk4=4.3.0.0'
			}
			withName: profileDamage {
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_options
				queue = 'sThC.q'
				conda = 'bioconda::damageprofiler=1.1'
			}
			withName: trimAncientTermini { 
				queue = 'sThC.q'
				clusterOptions = default_options
				conda = 'bioconda::bamutil=1.0.15'
			}
			withName: 'runBcftools|runGATK' {
				storeDir = storedir
			}
			withName: 'flagStats|mergeSampleBAM|mergedFlagStats' {
				cpus = 8
				penv = 'mthread'
				queue = 'sThC.q'
				clusterOptions = default_options
			}
			withName: blastFilterMtDNA {
				cpus = 8
				penv = 'mthread'
				queue = 'lThMuVM.tq'
				clusterOptions = "-l mres=8G,h_data=8G,himem -S /bin/bash"
				conda = 'bioconda::samtools=1.16.1 conda-forge::libzlib=1.2.13'
				module = ['bio/blast/2.13.0']
			}
			withName: 'bcftoolsMtVariants|bcftoolsGenomeVariants' {
				cpus = 16
				penv = 'mthread'
				clusterOptions = default_options
				queue = 'lThC.q'
				conda = 'bioconda::bcftools=1.16 conda-forge::libzlib=1.2.13 conda-forge::gsl=2.7'
			}
			withName: 'callMtVariants|callGenomeVariants|consolidategenomegVCFs|consolidatemtgVCFs|jointGenotypegVCFs|hardFilterInitialVCF|selectInitialSNPs|combineFinalgVCFs|genotypeFinalGVCFs|hardFilterFinalVCF|selectFinalSites' {
				cpus = 2
				penv = 'mthread'
				clusterOptions = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
				queue = 'lThM.q'
				conda = 'bioconda::picard=2.27.4 bioconda::gatk4=4.3.0.0 bioconda::vcftools=0.1.16 bioconda::bedtools=2.30.0'
			}
			withName: 'optimizeSampleSet|optimizeBcftoolsSampleSet|missingnessDepthVCF|indivOptimalGATK|indivOptimalBcftools|concatenateAlignments|intersectGATKPairedIndividuals|intersectBcftoolsPairedIndividuals|unionIterateBcftools' {
				queue = 'sThC.q'
				conda = 'bioconda::vcftools=0.1.16 conda-forge::ruby=3.1.2 bioconda::bedtools=2.30.0'
				clusterOptions = default_options
			}
			withName: unionIterateBcftoolsBED {
				queue = 'sThM.q'
				conda = 'bioconda::vcftools=0.1.16 conda-forge::ruby=3.1.2 bioconda::bedtools=2.30.0'
				clusterOptions = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
			}
			withName: 'iterateBcftoolsGenomeSamples|iterateMtSamples|iterateGenomeSamples|downsampleUnionAlns' {
				queue = 'sThC.q'
				conda = 'conda-forge::ruby=3.1.2'
				clusterOptions = default_options
			}
			withName: 'concatenatedTrees|concatenatedBcftoolsTrees' {
				queue = 'mThC.q'
				cpus = 8
				penv = 'mthread'
				clusterOptions = default_options
				conda = 'bioconda::iqtree=2.2.0.3 conda-forge::libzlib=1.2.13'
			}
			withName: 'bcftoolsAstral|Astral' {
				queue = 'sThC.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_options
				conda = 'bioconda::astral-tree=5.7.8'
			}
			withName: 'bcftoolsAster|Aster' {
				module = ['gcc/7.3.0']
			}
		}
	}
hydra {
	 	// Parameters for the SI/HPC Hydra-6 UGE cluster using Conda.
	 	params {
			picard_java = '-D64 -Dserver -XX:MaxHeapSize=5G'
	 		gatk_java = '-D64 -Dserver -XX:MaxHeapSize=5G'
	 		picard_conda = true
			gatk_conda = true
		}
		


		process {
			
			errorStrategy = { task.attempt < 4 ? 'retry' : 'finish' }
			maxRetries = 3
			storeDir = 'chkpnt_10x'
			withName: prepareRef {
				queue = 'mThC.q'
				clusterOptions = default_medium_options
			}
			withName: alignSeqs {
				queue = 'mThC.q'
				cpus = 20
				penv = 'mthread'
				clusterOptions = default_low_options
			}
			withName: markDuplicates {
				queue = 'mThC.q'
				cpus = 3
				penv = 'mthread'
				clusterOptions = default_medium_options // Needs more memory/threads
			}
			withName: mergeLibraries {
				queue = 'mThC.q'
				cpus = 3
				penv = 'mthread'
				clusterOptions = default_medium_options // Needs more memory/threads
			}
			withName: realignIndels {
				queue = 'mThC.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_medium_options
			}
			withName: filterBAMs  {
				queue = 'mThC.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_medium_options
			}
			withName: fixMate {
				queue = 'mThC.q'
				cpus = 3
				penv = 'mthread'
				clusterOptions = default_medium_options // Needs more memory/threads
			}
			withName: callVariants {
				queue = 'lThM.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_high_options
			}
			withName: genotypegVCFs {
				queue = 'lThM.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_high_options
			}
			
			withName: 'repeatMask|repeatMaskRM' {
				queue = 'mThM.q'
				cpus = 24
				penv = 'mthread'
				clusterOptions = default_high_options
			}
			withName: repeatModeler {
				queue = 'mThM.q'
				cpus = 48
				penv = 'mthread'
				clusterOptions = default_high_options
			}
			withName: maskIndels {
				queue = 'mThC.q'
				clusterOptions = default_low_options
			}
			withName: simplifyBed {
				queue = 'sThC.q'
				clusterOptions = default_medium_options
			}
			withName: filterChr {
				queue = 'lThC.q'
				clusterOptions = default_medium_options
			}
			withName: phaseTrio {
				queue = 'mThM.q'
				clusterOptions = "-l mres=32G,h_data=32G,h_vmem=32G,himem -S /bin/bash"
			}
			withName: splitTrios {
				queue = 'mThC.q'
				clusterOptions = default_medium_options
			}
			withName: pullDPGQ {
				queue = 'mThM.q'
				clusterOptions = default_high_options
			}
			withName: plotDPGQ {
				queue = 'sThM.q'
				clusterOptions = "-l mres=32G,h_data=32G,h_vmem=32G,himem -S /bin/bash"
			}
			withName: splitVCFs {
				queue = 'mThC.q'
				clusterOptions = default_low_options	
			}
			withName: vcftoolsFilterSites {
				queue = 'mThC.q'
				clusterOptions = default_medium_options
			}
			withName: gatkFilterSites {
				queue = 'mThM.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_high_options
			}
			withName: filterRegions {
				queue = 'mThM.q'
				clusterOptions = default_high_options
			}
			withName: calcDNMRate {
				queue = 'mThC.q'
				clusterOptions = default_low_options
			}
			withName: summarizeDNM {
				queue = 'sThM.q'
				clusterOptions = default_high_options
			}
			withName: sanityCheckLogs {
				queue = 'sThC.q'
				clusterOptions = default_low_options
			}
			withName: generateSummaryStats {
				queue = 'sThC.q'
				clusterOptions = default_low_options
			}
		}
	}

}
