manifest {

	name = 'MuseumSpecimens'
	author = 'Michael G. Campana'
	homePage = 'https://github.com/campanam/MuseumSpecimens'
	description = 'Pipeline for museum specimen processing'
	mainScript = 'museumspecimens.nf'
	version = '0.1.3'
	nextflowVersion = '>=23.10.0'

}

params {
	
	outdir = "roosevelt_results" // Output directory
	refseq = "/scratch/nzp_ccg/refidx/lion_hap2X_out_JBAT_nov18.debris.reorder2_hap1Yadd.FINAL.fa" // Reference sequence
	gm_tmpdir = '/pool/genomics/campanam/tmp' // Scratch directory for GenMap indexing
	gm_opts = '-K 30 -E 2' // Options for GenMap mapping (except threading)
	pelibraries = "$launchDir/historic_lionsPE.csv" // File detailing paired-end sample reads Set to "NULL" if no paired-end libraries.
	selibraries = "$launchDir/historic_lionsSE.csv" // File detailing single-end sample reads. Set to "NULL" if no single-end libraries.
	readDir = "$launchDir/RawData/" // Path to reads
	picard_java = '-D64 -Dserver -XX:MaxHeapSize=5G' // Java options for Picard
	gatk_java = '-D64 -Dserver -XX:MaxHeapSize=5G' // Java options for GATK
	java11_options = '-Dserver -XX:MaxHeapSize=7G'
	markDuplicates = "samtools" // Choice of "picard", "samtools" or "sambamba" for markDuplicates
	aDNA_trimmed_bases = 2 // Number of bases to trim from 5' and 3' termini to account for deamination damage
	rx = true // Run sexing using Rx statistic
	rx_script = "$launchDir/lion-rx.r" // Path to customized Mittnik et al. 2016 Rx script
	kmerSex = true // Run sexing using Ymers
	kmers = "$launchDir/lion_ymers.txt" // Path to list of lion ymers
	sry = 'hap1Y_scaffold_19:7080000-21982705' // Location of SRY in reference genome
	blast = false // Run BLAST analysis on unaligned reads
	blastdb = '/scratch/dbs/blast/v5/nt' // Path to BLAST nt database
	csi = false // Use csi index (e.g. for chr > 512 Mb)
		
}

conda.enabled = true
conda.useMamba = true // Install Conda environments using Mamba manager

profiles {
	standard {
	
		executor = 'local'
		
		process {
			errorStrategy = 'finish'
			maxRetries = 3
			
			withName: 'prepareRef|alignSeqs|mergeLibraries|calculateStatistics' {
				conda = 'bioconda::bwa=0.7.19 bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'genMapIndex|genMapMap' {
				conda = 'bioconda::genmap=1.3.0 conda-forge::ruby=3.2.2'
			}
			withName: 'trimPEAdapters|trimSEAdapters' { 
				conda = 'bioconda::adapterremoval=2.3.4 conda-forge::libzlib=1.3.1'
			}
			withName: profileDamage {
				conda = 'bioconda::damageprofiler=1.1'
			}
			withName: trimAncientTermini { 
				conda = 'bioconda::bamutil=1.0.15'
			}
			withName: 'realignIndels|reRealignIndels' {
				conda = 'bioconda::gatk4=4.6.2.0 bioconda::picard=3.4.0 conda-forge::openjdk=17.0.9 bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'markDuplicates|reMarkDuplicates' {
				if ( params.markDuplicates == "picard" ) {
					conda = 'bioconda::picard=3.4.0'
				} else if (params.markDuplicates == 'samtools') {
					conda = 'bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
				} else {
					conda = 'bioconda::sambamba=1.0.1'
				}
			}
			withName: 'calculateRxy' {
				conda = 'bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1 conda-forge::r-base=4.3.2'
			}
			withName: 'kmerSex' {
				conda = 'bioconda::bwa=0.7.19 bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1 bioconda::bbmap=38.84'
			}
			withName: 'extractUnalignedReads' {
				conda = 'bioconda::cd-hit=4.8.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'blastUnalignedReads' {
				conda = 'bioconda::blast=2.13.0 conda-forge::libzlib=1.3.1 bioconda::megan=6.24.20'
			}
		}
	}
	
	
	hydra {
	
		// Default clusterOptions for picard, vcftools and java commands
		params.java11_options = '-Dserver -XX:MaxHeapSize=63G' // Options for Java 11
		default_medium_options = '-l mres=8G,h_data=8G,h_vmem=8G -S /bin/bash'
		default_high_options = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
	 	default_low_options = '-l mres=2G,h_data=2G,h_vmem=2G -S /bin/bash' // Options for low computation steps
			
		process {
			
			executor = 'sge'
			errorStrategy = { task.attempt < 4 ? 'retry' : 'finish' }
			maxRetries = 3
			storeDir = 'chkpnt' // Directory name for storeDir directive
		
			withName: 'prepareRef|alignSeqs' {
				conda = 'bioconda::bwa=0.7.19 bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'prepareRef' {
				clusterOptions = default_medium_options
				queue = 'mThC.q'
				storeDir = '/scratch/nzp_ccg/refidx'
			}
			withName: alignSeqs {
				queue = 'mThC.q'
				cpus = 20
				penv = 'mthread'
				clusterOptions = default_low_options
			}
			withName: 'genMapIndex|genMapMap' {
				conda = 'bioconda::genmap=1.3.0 conda-forge::ruby=3.2.2'
				storeDir = '/scratch/nzp_ccg/refidx'
			}
			withName: genMapIndex {
				queue = 'mThM.q'
				clusterOptions = default_high_options
			}
			withName: genMapMap {
				queue = 'mThM.q'
				cpus = 8
				penv = 'mthread'
				clusterOptions = "-l mres=10G,h_data=10G,h_vmem=10G,himem -S /bin/bash"
				storeDir = '/scratch/nzp_ccg/refidx'
			}
			withName: 'trimPEAdapters|trimSEAdapters' { 
				queue = 'mThC.q'
				clusterOptions = default_medium_options
				conda = 'bioconda::adapterremoval=2.3.4 conda-forge::libzlib=1.3.1'
			}
			withName: profileDamage {
				cpus = 2
				penv = 'mthread'
				clusterOptions = '-l mres=64G,h_data=64G,h_vmem=64G,himem -S /bin/bash'
				queue = 'sThM.q'
				conda = 'bioconda::damageprofiler=1.1'
			}
			withName: trimAncientTermini { 
				queue = 'sThC.q'
				clusterOptions = default_medium_options
				conda = 'bioconda::bamutil=1.0.15'
			}
			withName: 'mergeLibraries|calculateStatistics' {
				queue = 'mThC.q'
				cpus = 3
				penv = 'mthread'
				clusterOptions = default_medium_options // Needs more memory/threads
				conda = 'bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'realignIndels|reRealignIndels' {
				queue = 'mThM.q'
				cpus = 2
				penv = 'mthread'
				clusterOptions = default_high_options
				conda = 'bioconda::gatk4=4.6.2.0 bioconda::picard=3.4.0 conda-forge::openjdk=17.0.9 bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'markDuplicates|reMarkDuplicates' {
				queue = 'mThC.q'
				cpus = 3
				penv = 'mthread'
				clusterOptions = default_medium_options // Needs more memory/threads
				if ( params.markDuplicates == "picard" ) {
					conda = 'bioconda::picard=3.4.0'
				} else if (params.markDuplicates == 'samtools') {
					conda = 'bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1'
				} else {
					conda = 'bioconda::sambamba=1.0.1'
				}
			}
			withName: 'calculateRxy' {
				queue = 'mThC.q'
				cpus = 3
				penv = 'mthread'
				clusterOptions = default_medium_options // Needs more memory/threads
				conda = 'bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1 conda-forge::r-base=4.3.2'
			}
			withName: 'kmerSex' {
				queue = 'sThC.q'
				cpus = 1
				clusterOptions = default_medium_options
				conda = 'bioconda::bwa=0.7.19 bioconda::samtools=1.22.1 conda-forge::libzlib=1.3.1 bioconda::bbmap=38.84'
			}
			withName: 'extractUnalignedReads' {
				queue = 'mThM.q'
				cpus = 48
				clusterOptions = "-l mres=96G,h_data=2G,h_vmem=2G,himem -S /bin/bash"
				penv = 'mthread'
				conda = 'bioconda::cd-hit=4.8.1 conda-forge::libzlib=1.3.1'
			}
			withName: 'blastUnalignedReads' {
				queue = 'lThM.q'
				cpus = 5
				clusterOptions = "-l mres=500G,h_data=100G,h_vmem=100G,himem -S /bin/bash"
				penv = 'mthread'
				conda = 'bioconda::blast=2.13.0 conda-forge::libzlib=1.3.1 bioconda::megan=6.24.20'
			}
		}
	}
}
